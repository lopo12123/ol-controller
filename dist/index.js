import{create_tile_map__xyz as e,create_point_layer as t,create_point_cluster_layer as a,create_polygon_layer__GeoJson as s,create_polygon_layer__PathArray as r,create_polyline_layer as o}from"./core.js";import{AnimationController as l}from"./animation.js";import{PopupController as i}from"./popup.js";import{Select as n}from"ol/interaction";import{getTopRight as h}from"ol/extent";import"ol/ol.css";import"ol";import"ol/layer/Tile";import"ol/source";import"ol/layer/Vector";import"ol/source/Vector";import"ol/format";import"ol/style";import"ol/geom";import"ol/proj";import"ol/style/Circle";import"ol/layer/Image";import"ol/render";class p{#e;get dom(){return this.#e}#t=null;get map(){return this.#t}get instantiated(){return null!==this.#t}enable_select_listener(){const e=new n;e.on("select",(e=>{const t=e.target?.getFeatures()?.getArray()?.[0];if(t){const e=h(t.getGeometry().getExtent());t.getProperties()._click_callback?.(e)}e.target?.getFeatures()?.clear()})),this.#t?.addInteraction(e)}constructor(t,a){this.#e=t,this.#t=e(t,a),this.enable_select_listener()}render(t,a){null!==this.#t&&(console.warn('[OlController] There is a map instance on the target dom, calling the method "render" will overwrite the old map instance. If that`s what you`re doing, ignore this warning.'),this.dispose()),this.#e=t,this.#t=e(t,a),this.enable_select_listener()}zoom(e){const t=this.#t?.getView(),a=t?.getZoom();t&&a&&("-"===e?t.setZoom(a-1):"+"===e?t.setZoom(a+1):t.setZoom(e))}getZoomLevel(){return this.#t?.getView().getZoom()??null}searchInLayer(e,t){const a=this.#a.get(e);if(a){const e=a.getSource().getFeatures();for(let a=0;a<e.length;a++){const s=e[a].getProperties().self;if(t(s))return s.ext??null}}return null}toggle_visible(e,t){const a=this.#a.get(e);a&&a.setVisible(t??!a.getVisible())}#a=new Map;get layers(){return[...this.#a.keys()]}getLayer(e){return this.#a.get(e)}addPointLayer(e,a,s,r){if(this.#t){this.#a.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const o=t(a,s,r);this.#a.set(e,o),this.#t.addLayer(o)}else console.warn("[OlController] The map instance has already disposed.")}addPointClusterLayer(e,t,s,r,o,l,i){if(this.#t){this.#a.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const n=a(t,s,r,o,l,i);this.#a.set(e,n),this.#t.addLayer(n)}else console.warn("[OlController] The map instance has already disposed.")}addPolygonLayer(e,t,a,o){if(this.#t)if(this.#a.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`),"string"==typeof t){const r=s(t,a);this.#a.set(e,r),this.#t.addLayer(r)}else{const s=r(t,a,o);this.#a.set(e,s),this.#t.addLayer(s)}else console.warn("[OlController] The map instance has already disposed.")}addPolylineLayer(e,t,a,s){if(this.#t){this.#a.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const r=o(t,a,s);this.#a.set(e,r),this.#t.addLayer(r)}else console.warn("[OlController] The map instance has already disposed.")}removeLayer(e){void 0===e?(this.#a.forEach((e=>{e.dispose()})),this.#a.clear()):(this.#a.get(e)?.dispose(),this.#a.delete(e))}#s=new Map;get animationLayers(){return[...this.#s.keys()]}addAnimation(e,t,a,s=1e5,r,o){if(this.#t){this.#s.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const i=new l(this.#t,t,a,s,r,o);this.#s.set(e,i)}else console.warn("[OlController] The map instance has already disposed.")}getAnimation(e){return this.#s.get(e)??null}removeAnimation(e){void 0===e?(this.#s.forEach((e=>{e.dispose()})),this.#s.clear()):(this.#s.get(e)?.dispose(),this.#s.delete(e))}#r=new Map;get popupOverlays(){return[...this.#r.keys()]}addPopup(e,t,a,s){if(this.#t){this.#r.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const r=new i(t,this.#t,a,s);this.#r.set(e,r)}else console.warn("[OlController] The map instance has already disposed.")}getPopup(e){return this.#r.get(e)??null}removePopup(e){void 0===e?(this.#r.forEach((e=>{e.dispose()})),this.#r.clear()):(this.#r.get(e)?.dispose(),this.#r.delete(e))}animateTo(e,t=1500){this.#t?.getView().animate({center:e,duration:t})}cleanUp(){this.removeLayer(),this.removeAnimation()}dispose(){this.cleanUp(),this.#t?.dispose(),this.#t=null,this.#e=null}}export{p as OlController};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2xpYi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJuYW1lcyI6WyJPbENvbnRyb2xsZXIiLCJkb20iLCJ0aGlzIiwibWFwIiwiaW5zdGFudGlhdGVkIiwiZW5hYmxlX3NlbGVjdF9saXN0ZW5lciIsInNpbmdsZUNsaWNrIiwiU2VsZWN0Iiwib24iLCJldiIsIml0ZW0iLCJ0YXJnZXQiLCJnZXRGZWF0dXJlcyIsImdldEFycmF5IiwiY29vcmRpbmF0ZSIsImdldFRvcFJpZ2h0IiwiZ2V0R2VvbWV0cnkiLCJnZXRFeHRlbnQiLCJnZXRQcm9wZXJ0aWVzIiwiX2NsaWNrX2NhbGxiYWNrIiwiY2xlYXIiLCJhZGRJbnRlcmFjdGlvbiIsImNvbnN0cnVjdG9yIiwiZWwiLCJpbml0T3B0aW9ucyIsImNyZWF0ZV90aWxlX21hcF9feHl6IiwicmVuZGVyIiwiY29uc29sZSIsIndhcm4iLCJkaXNwb3NlIiwiem9vbSIsInRvIiwidmlldyIsImdldFZpZXciLCJjdXJyX2xldmVsIiwiZ2V0Wm9vbSIsInNldFpvb20iLCJnZXRab29tTGV2ZWwiLCJzZWFyY2hJbkxheWVyIiwibGF5ZXJOYW1lIiwiY29uZGl0aW9uIiwibGF5ZXIiLCJsYXllcnMiLCJnZXQiLCJmZWF0dXJlcyIsImdldFNvdXJjZSIsImkiLCJsZW5ndGgiLCJzZWxmIiwiZXh0IiwidG9nZ2xlX3Zpc2libGUiLCJ0YXJnZXRfbGF5ZXIiLCJzZXRWaXNpYmxlIiwiZ2V0VmlzaWJsZSIsIk1hcCIsImtleXMiLCJnZXRMYXllciIsImFkZFBvaW50TGF5ZXIiLCJwb2ludHMiLCJpY29uIiwiY2xpY2tDQiIsImhhcyIsImxheWVyX3BvaW50IiwiY3JlYXRlX3BvaW50X2xheWVyIiwic2V0IiwiYWRkTGF5ZXIiLCJhZGRQb2ludENsdXN0ZXJMYXllciIsImRpc3RhbmNlIiwibWluRGlzdGFuY2UiLCJjbHVzdGVyU3R5bGUiLCJsYXllcl9wb2ludF9jbHVzdGVyIiwiY3JlYXRlX3BvaW50X2NsdXN0ZXJfbGF5ZXIiLCJhZGRQb2x5Z29uTGF5ZXIiLCJwb2x5Z29ucyIsInN0eWxlIiwibGF5ZXJfanNvbiIsImNyZWF0ZV9wb2x5Z29uX2xheWVyX19HZW9Kc29uIiwibGF5ZXJfcGF0aCIsImNyZWF0ZV9wb2x5Z29uX2xheWVyX19QYXRoQXJyYXkiLCJhZGRQb2x5bGluZUxheWVyIiwicG9seWxpbmVzIiwibGF5ZXJfcG9seWxpbmUiLCJjcmVhdGVfcG9seWxpbmVfbGF5ZXIiLCJyZW1vdmVMYXllciIsInVuZGVmaW5lZCIsImZvckVhY2giLCJ2ZWNMYXllciIsImRlbGV0ZSIsImFuaW1hdGlvbkxheWVycyIsImFkZEFuaW1hdGlvbiIsInBhdGgiLCJpY29ucyIsImR1cmF0aW9uIiwicGVyY2VudFVwZGF0ZUNCIiwiYW5pbWF0aW9uX2NvbnRyb2xsZXIiLCJBbmltYXRpb25Db250cm9sbGVyIiwiZ2V0QW5pbWF0aW9uIiwicmVtb3ZlQW5pbWF0aW9uIiwiY29udHJvbGxlciIsInBvcHVwT3ZlcmxheXMiLCJhZGRQb3B1cCIsImFuY2hvciIsIm9mZnNldCIsInBvcHVwX2NvbnRyb2xsZXIiLCJQb3B1cENvbnRyb2xsZXIiLCJnZXRQb3B1cCIsInJlbW92ZVBvcHVwIiwiYW5pbWF0ZVRvIiwiY2VudGVyIiwiYW5pbWF0ZSIsImNsZWFuVXAiXSwibWFwcGluZ3MiOiJ3bkJBc0JBLE1BQU1BLEVBS0ZDLEdBSUlBLFVBQ0EsT0FBT0MsTUFBS0QsRUFNaEJFLEdBQXFCLEtBSWpCQSxVQUNBLE9BQU9ELE1BQUtDLEVBTVpDLG1CQUNBLE9BQXFCLE9BQWRGLE1BQUtDLEVBT1JFLHlCQUNKLE1BQU1DLEVBQWMsSUFBSUMsRUFDeEJELEVBQVlFLEdBQUcsVUFBV0MsSUFDdEIsTUFBTUMsRUFBT0QsRUFBR0UsUUFBUUMsZUFBZUMsYUFBYSxHQUNwRCxHQUFLSCxFQUFNLENBQ1AsTUFBTUksRUFBYUMsRUFBWUwsRUFBS00sY0FBY0MsYUFFbERQLEVBQUtRLGdCQUFnQkMsa0JBQWtC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
