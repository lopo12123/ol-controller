import{create_tile_map__xyz as e,create_point_layer as t,create_point_cluster_layer as a,create_polygon_layer__GeoJson as s,create_polygon_layer__PathArray as r,create_polyline_layer as o}from"./core.js";import{AnimationController as i}from"./animation.js";import{PopupController as l}from"./popup.js";import{Select as n}from"ol/interaction";import{getCenter as h}from"ol/extent";import"ol/ol.css";import"ol";import"ol/layer/Tile";import"ol/source";import"ol/layer/Vector";import"ol/source/Vector";import"ol/format";import"ol/style";import"ol/geom";import"ol/proj";import"ol/style/Circle";import"ol/layer/Image";import"ol/render";class p{#e;get dom(){return this.#e}#t=null;get map(){return this.#t}get instantiated(){return null!==this.#t}enable_select_listener(){const e=new n;e.on("select",(e=>{const t=e.target?.getFeatures()?.getArray()?.[0];if(t){const e=h(t.getGeometry().getExtent());t.getProperties()._click_callback?.(e)}e.target?.getFeatures()?.clear()})),this.#t?.addInteraction(e)}constructor(t,a){this.#e=t,this.#t=e(t,a),this.enable_select_listener()}render(t,a){null!==this.#t&&(console.warn('[OlController] There is a map instance on the target dom, calling the method "render" will overwrite the old map instance. If that`s what you`re doing, ignore this warning.'),this.dispose()),this.#e=t,this.#t=e(t,a),this.enable_select_listener()}zoom(e){const t=this.#t?.getView(),a=t?.getZoom();t&&a&&("-"===e?t.setZoom(a-1):"+"===e?t.setZoom(a+1):t.setZoom(e))}getZoomLevel(){return this.#t?.getView().getZoom()??null}#a=new Map;get layers(){return[...this.#a.keys()]}addPointLayer(e,a,s,r){if(this.#t){this.#a.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const o=t(a,s,r);this.#a.set(e,o),this.#t.addLayer(o)}else console.warn("[OlController] The map instance has already disposed.")}addPointClusterLayer(e,t,s,r,o,i,l){if(this.#t){this.#a.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const n=a(t,s,r,o,i,l);this.#a.set(e,n),this.#t.addLayer(n)}else console.warn("[OlController] The map instance has already disposed.")}addPolygonLayer(e,t,a,o){if(this.#t)if(this.#a.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`),"string"==typeof t){const r=s(t,a);this.#a.set(e,r),this.#t.addLayer(r)}else{const s=r(t,a,o);this.#a.set(e,s),this.#t.addLayer(s)}else console.warn("[OlController] The map instance has already disposed.")}addPolylineLayer(e,t,a,s){if(this.#t){this.#a.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const r=o(t,a,s);this.#a.set(e,r),this.#t.addLayer(r)}else console.warn("[OlController] The map instance has already disposed.")}toggle_visible(e,t){const a=this.#a.get(e);a&&a.setVisible(t??!a.getVisible())}removeLayer(e){void 0===e?(this.#a.forEach((e=>{e.dispose()})),this.#a.clear()):(this.#a.get(e)?.dispose(),this.#a.delete(e))}#s=new Map;get animationLayers(){return[...this.#s.keys()]}addAnimation(e,t,a,s=1e5,r,o){if(this.#t){this.#s.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const l=new i(this.#t,t,a,s,r,o);this.#s.set(e,l)}else console.warn("[OlController] The map instance has already disposed.")}getAnimation(e){return this.#s.get(e)??null}removeAnimation(e){void 0===e?(this.#s.forEach((e=>{e.dispose()})),this.#s.clear()):(this.#s.get(e)?.dispose(),this.#s.delete(e))}#r=new Map;get popupOverlays(){return[...this.#r.keys()]}addPopup(e,t,a,s){if(this.#t){this.#r.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const r=new l(t,this.#t,a,s);this.#r.set(e,r)}else console.warn("[OlController] The map instance has already disposed.")}getPopup(e){return this.#r.get(e)??null}removePopup(e){void 0===e?(this.#r.forEach((e=>{e.dispose()})),this.#r.clear()):(this.#r.get(e)?.dispose(),this.#r.delete(e))}animateTo(e,t=1500){this.#t?.getView().animate({center:e,duration:t})}cleanUp(){this.removeLayer(),this.removeAnimation()}dispose(){this.cleanUp(),this.#t?.dispose(),this.#t=null,this.#e=null}}export{p as OlController};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2xpYi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJuYW1lcyI6WyJPbENvbnRyb2xsZXIiLCJkb20iLCJ0aGlzIiwibWFwIiwiaW5zdGFudGlhdGVkIiwiZW5hYmxlX3NlbGVjdF9saXN0ZW5lciIsInNpbmdsZUNsaWNrIiwiU2VsZWN0Iiwib24iLCJldiIsIml0ZW0iLCJ0YXJnZXQiLCJnZXRGZWF0dXJlcyIsImdldEFycmF5IiwiY29vcmRpbmF0ZSIsImdldENlbnRlciIsImdldEdlb21ldHJ5IiwiZ2V0RXh0ZW50IiwiZ2V0UHJvcGVydGllcyIsIl9jbGlja19jYWxsYmFjayIsImNsZWFyIiwiYWRkSW50ZXJhY3Rpb24iLCJjb25zdHJ1Y3RvciIsImVsIiwiaW5pdE9wdGlvbnMiLCJjcmVhdGVfdGlsZV9tYXBfX3h5eiIsInJlbmRlciIsImNvbnNvbGUiLCJ3YXJuIiwiZGlzcG9zZSIsInpvb20iLCJ0byIsInZpZXciLCJnZXRWaWV3IiwiY3Vycl9sZXZlbCIsImdldFpvb20iLCJzZXRab29tIiwiZ2V0Wm9vbUxldmVsIiwibGF5ZXJzIiwiTWFwIiwia2V5cyIsImFkZFBvaW50TGF5ZXIiLCJsYXllck5hbWUiLCJwb2ludHMiLCJpY29uIiwiY2xpY2tDQiIsImhhcyIsImxheWVyX3BvaW50IiwiY3JlYXRlX3BvaW50X2xheWVyIiwic2V0IiwiYWRkTGF5ZXIiLCJhZGRQb2ludENsdXN0ZXJMYXllciIsImRpc3RhbmNlIiwibWluRGlzdGFuY2UiLCJjbHVzdGVyU3R5bGUiLCJsYXllcl9wb2ludF9jbHVzdGVyIiwiY3JlYXRlX3BvaW50X2NsdXN0ZXJfbGF5ZXIiLCJhZGRQb2x5Z29uTGF5ZXIiLCJwb2x5Z29ucyIsInN0eWxlIiwibGF5ZXJfanNvbiIsImNyZWF0ZV9wb2x5Z29uX2xheWVyX19HZW9Kc29uIiwibGF5ZXJfcGF0aCIsImNyZWF0ZV9wb2x5Z29uX2xheWVyX19QYXRoQXJyYXkiLCJhZGRQb2x5bGluZUxheWVyIiwicG9seWxpbmVzIiwibGF5ZXJfcG9seWxpbmUiLCJjcmVhdGVfcG9seWxpbmVfbGF5ZXIiLCJ0b2dnbGVfdmlzaWJsZSIsInRhcmdldF9sYXllciIsImdldCIsInNldFZpc2libGUiLCJnZXRWaXNpYmxlIiwicmVtb3ZlTGF5ZXIiLCJ1bmRlZmluZWQiLCJmb3JFYWNoIiwidmVjTGF5ZXIiLCJkZWxldGUiLCJhbmltYXRpb25MYXllcnMiLCJhZGRBbmltYXRpb24iLCJwYXRoIiwiaWNvbnMiLCJkdXJhdGlvbiIsInBlcmNlbnRVcGRhdGVDQiIsImFuaW1hdGlvbl9jb250cm9sbGVyIiwiQW5pbWF0aW9uQ29udHJvbGxlciIsImdldEFuaW1hdGlvbiIsInJlbW92ZUFuaW1hdGlvbiIsImNvbnRyb2xsZXIiLCJwb3B1cE92ZXJsYXlzIiwiYWRkUG9wdXAiLCJhbmNob3IiLCJvZmZzZXQiLCJwb3B1cF9jb250cm9sbGVyIiwiUG9wdXBDb250cm9sbGVyIiwiZ2V0UG9wdXAiLCJyZW1vdmVQb3B1cCIsImFuaW1hdGVUbyIsImNlbnRlciIsImFuaW1hdGUiLCJjbGVhblVwIl0sIm1hcHBpbmdzIjoic25CQXNCQSxNQUFNQSxFQUtGQyxHQUlJQSxVQUNBLE9BQU9DLE1BQUtELEVBTWhCRSxHQUFxQixLQUlqQkEsVUFDQSxPQUFPRCxNQUFLQyxFQU1aQyxtQkFDQSxPQUFxQixPQUFkRixNQUFLQyxFQU9SRSx5QkFDSixNQUFNQyxFQUFjLElBQUlDLEVBQ3hCRCxFQUFZRSxHQUFHLFVBQVdDLElBQ3RCLE1BQU1DLEVBQU9ELEVBQUdFLFFBQVFDLGVBQWVDLGFBQWEsR0FDcEQsR0FBS0gsRUFBTSxDQUNQLE1BQU1JLEVBQWFDLEVBQVVMLEVBQUtNLGNBQWNDLGFBRWhEUCxFQUFLUSxnQkFBZ0JDLGtCQUFrQkwsR0FHM0NMLEVBQUdFLFFBQVFDLGVBQWVRLFdBRTlCbEIsTUFBS0MsR0FBTWtCLGVBQWVmLEdBUTlCZ0IsWUFDSUMsRUFDQUMsR0FDQXRCLE1BQUtELEVBQU9zQixFQUNa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
