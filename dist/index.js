import{create_tile_map__xyz as e,create_point_layer as a,create_point_cluster_layer as t,create_polygon_layer__GeoJson as s,create_polygon_layer__PathArray as o,create_polyline_layer as r}from"./core.js";import{AnimationController as i}from"./animation.js";import{PopupController as l}from"./popup.js";import"ol/ol.css";import"ol";import"ol/layer/Tile";import"ol/source";import"ol/layer/Vector";import"ol/source/Vector";import"ol/format";import"ol/style";import"ol/geom";import"ol/proj";import"ol/style/Circle";import"ol/layer/Image";import"ol/render";class n{#e;get dom(){return this.#e}#a=null;get map(){return this.#a}get instantiated(){return null!==this.#a}constructor(a,t){this.#e=a,this.#a=e(a,t)}render(a,t){null!==this.#a&&(console.warn('[OlController] There is a map instance on the target dom, calling the method "render" will overwrite the old map instance. If that`s what you`re doing, ignore this warning.'),this.dispose()),this.#e=a,this.#a=e(a,t)}zoom(e){const a=this.#a?.getView(),t=a?.getZoom();a&&t&&("-"===e?a.setZoom(t-1):"+"===e?a.setZoom(t+1):a.setZoom(e))}getZoomLevel(){return this.#a?.getView().getZoom()??null}#t=new Map;get layers(){return[...this.#t.keys()]}addPointLayer(e,t,s){if(this.#a){this.#t.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const o=a(t,s);this.#t.set(e,o),this.#a.addLayer(o)}else console.warn("[OlController] The map instance has already disposed.")}addPointClusterLayer(e,a,s,o,r,i){if(this.#a){this.#t.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const l=t(a,s,o,r,i);this.#t.set(e,l),this.#a.addLayer(l)}else console.warn("[OlController] The map instance has already disposed.")}addPolygonLayer(e,a,t){if(this.#a)if(this.#t.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`),"string"==typeof a){const o=s(a,t);this.#t.set(e,o),this.#a.addLayer(o)}else{const s=o(a,t);this.#t.set(e,s),this.#a.addLayer(s)}else console.warn("[OlController] The map instance has already disposed.")}addPolylineLayer(e,a,t){if(this.#a){this.#t.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const s=r(a,t);this.#t.set(e,s),this.#a.addLayer(s)}else console.warn("[OlController] The map instance has already disposed.")}toggle_visible(e,a){const t=this.#t.get(e);t&&t.setVisible(a??!t.getVisible())}removeLayer(e){void 0===e?(this.#t.forEach((e=>{e.dispose()})),this.#t.clear()):(this.#t.get(e)?.dispose(),this.#t.delete(e))}#s=new Map;get animationLayers(){return[...this.#s.keys()]}addAnimation(e,a,t,s=1e5,o,r){if(this.#a){this.#s.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const l=new i(this.#a,a,t,s,o,r);this.#s.set(e,l)}else console.warn("[OlController] The map instance has already disposed.")}getAnimation(e){return this.#s.get(e)??null}removeAnimation(e){void 0===e?(this.#s.forEach((e=>{e.dispose()})),this.#s.clear()):(this.#s.get(e)?.dispose(),this.#s.delete(e))}#o=new Map;get popupOverlays(){return[...this.#o.keys()]}addPopup(e,a,t,s){if(this.#a){this.#o.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const o=new l(a,this.#a,t,s);this.#o.set(e,o)}else console.warn("[OlController] The map instance has already disposed.")}getPopup(e){return this.#o.get(e)??null}removePopup(e){void 0===e?(this.#o.forEach((e=>{e.dispose()})),this.#o.clear()):(this.#o.get(e)?.dispose(),this.#o.delete(e))}animateTo(e,a=1500){this.#a?.getView().animate({center:e,duration:a})}cleanUp(){this.removeLayer(),this.removeAnimation()}dispose(){this.cleanUp(),this.#a?.dispose(),this.#a=null,this.#e=null}}export{n as OlController};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2xpYi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJuYW1lcyI6WyJPbENvbnRyb2xsZXIiLCJkb20iLCJ0aGlzIiwibWFwIiwiaW5zdGFudGlhdGVkIiwiY29uc3RydWN0b3IiLCJlbCIsImluaXRPcHRpb25zIiwiY3JlYXRlX3RpbGVfbWFwX194eXoiLCJyZW5kZXIiLCJjb25zb2xlIiwid2FybiIsImRpc3Bvc2UiLCJ6b29tIiwidG8iLCJ2aWV3IiwiZ2V0VmlldyIsImN1cnJfbGV2ZWwiLCJnZXRab29tIiwic2V0Wm9vbSIsImdldFpvb21MZXZlbCIsImxheWVycyIsIk1hcCIsImtleXMiLCJhZGRQb2ludExheWVyIiwibGF5ZXJOYW1lIiwicG9pbnRzIiwiaWNvbiIsImhhcyIsImxheWVyX3BvaW50IiwiY3JlYXRlX3BvaW50X2xheWVyIiwic2V0IiwiYWRkTGF5ZXIiLCJhZGRQb2ludENsdXN0ZXJMYXllciIsImRpc3RhbmNlIiwibWluRGlzdGFuY2UiLCJjbHVzdGVyU3R5bGUiLCJsYXllcl9wb2ludF9jbHVzdGVyIiwiY3JlYXRlX3BvaW50X2NsdXN0ZXJfbGF5ZXIiLCJhZGRQb2x5Z29uTGF5ZXIiLCJwb2x5Z29ucyIsInN0eWxlIiwibGF5ZXJfanNvbiIsImNyZWF0ZV9wb2x5Z29uX2xheWVyX19HZW9Kc29uIiwibGF5ZXJfcGF0aCIsImNyZWF0ZV9wb2x5Z29uX2xheWVyX19QYXRoQXJyYXkiLCJhZGRQb2x5bGluZUxheWVyIiwicG9seWxpbmVzIiwibGF5ZXJfcG9seWxpbmUiLCJjcmVhdGVfcG9seWxpbmVfbGF5ZXIiLCJ0b2dnbGVfdmlzaWJsZSIsInRhcmdldF9sYXllciIsImdldCIsInNldFZpc2libGUiLCJnZXRWaXNpYmxlIiwicmVtb3ZlTGF5ZXIiLCJ1bmRlZmluZWQiLCJmb3JFYWNoIiwidmVjTGF5ZXIiLCJjbGVhciIsImRlbGV0ZSIsImFuaW1hdGlvbkxheWVycyIsImFkZEFuaW1hdGlvbiIsInBhdGgiLCJpY29ucyIsImR1cmF0aW9uIiwicGVyY2VudFVwZGF0ZUNCIiwiYW5pbWF0aW9uX2NvbnRyb2xsZXIiLCJBbmltYXRpb25Db250cm9sbGVyIiwiZ2V0QW5pbWF0aW9uIiwicmVtb3ZlQW5pbWF0aW9uIiwiY29udHJvbGxlciIsInBvcHVwT3ZlcmxheXMiLCJhZGRQb3B1cCIsImFuY2hvciIsIm9mZnNldCIsInBvcHVwX2NvbnRyb2xsZXIiLCJQb3B1cENvbnRyb2xsZXIiLCJnZXRQb3B1cCIsInJlbW92ZVBvcHVwIiwiYW5pbWF0ZVRvIiwiY2VudGVyIiwiYW5pbWF0ZSIsImNsZWFuVXAiXSwibWFwcGluZ3MiOiJ3aUJBb0JBLE1BQU1BLEVBS0ZDLEdBSUlBLFVBQ0EsT0FBT0MsTUFBS0QsRUFNaEJFLEdBQXFCLEtBSWpCQSxVQUNBLE9BQU9ELE1BQUtDLEVBTVpDLG1CQUNBLE9BQXFCLE9BQWRGLE1BQUtDLEVBUWhCRSxZQUNJQyxFQUNBQyxHQUNBTCxNQUFLRCxFQUFPSyxFQUNaSixNQUFLQyxFQUFPSyxFQUFxQkYsRUFBSUMsR0FRekNFLE9BQ0lILEVBQ0FDLEdBQ2lCLE9BQWRMLE1BQUtDLElBQ0pPLFFBQVFDLEtBQUssZ0xBQ2JULEtBQUtVLFdBRVRWLE1BQUtELEVBQU9LLEVBQ1pKLE1BQUtDLEVBQU9LLEVBQXFCRixFQUFJQyxHQVV6Q00sS0FBS0MsR0FDRCxNQUFNQyxFQUFPYixNQUFLQyxHQUFNYSxVQUNsQkMsRUFBYUYsR0FBTUcsVUFFckJILEdBQVNFLElBQ0UsTUFBUEgsRUFDSkMsRUFBS0ksUUFBUUYsRUFBYSxHQUVmLE1BQVBILEVBQ0pDLEVBQUtJLFFBQVFGLEVBQWEsR0FHMUJGLEVBQUtJLFFBQVFMLElBT3JCTSxlQUNJLE9BQU9sQixNQUFLQyxHQUFNYSxVQUFVRSxXQUFhLEtBUzdDRyxHQUFVLElBQUlDLElBSVZELGFBQ0EsTUFBTyxJQUFLbkIsTUFBS21CLEVBQVFFLFFBU3RCQyxjQUNIQyxFQUNBQyxFQUNBQyxHQUNBLEdBQUl6QixNQUFL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
