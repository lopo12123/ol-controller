"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("./core.js"),a=require("./animation.js"),r=require("./popup.js");require("ol/ol.css"),require("ol"),require("ol/layer/Tile"),require("ol/source"),require("ol/layer/Vector"),require("ol/source/Vector"),require("ol/format"),require("ol/style"),require("ol/geom"),require("ol/proj"),require("ol/style/Circle"),require("ol/render");exports.OlController=class{#e;get dom(){return this.#e}#a=null;get instantiated(){return null!==this.#a}constructor(a,r,s){this.#e=a,this.#a=e.create_tile_map__xyz(a,r,s)}render(a,r,s){null!==this.#a&&(console.warn('[OlController] There is a map instance on the target dom, calling the method "render" will overwrite the old map instance. If that`s what you`re doing, ignore this warning.'),this.dispose()),this.#e=a,this.#a=e.create_tile_map__xyz(a,r,s)}#r=new Map;get layers(){return[...this.#r.keys()]}addPointLayer(a,r,s){if(this.#a){this.#r.has(a)&&console.warn(`[OlController] A layer named "${a}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const t=e.create_point_layer(r,s);this.#r.set(a,t),this.#a.addLayer(t)}else console.warn("[OlController] The map instance has already disposed.")}addPointClusterLayer(a,r,s,t,l,o){if(this.#a){this.#r.has(a)&&console.warn(`[OlController] A layer named "${a}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const i=e.create_point_cluster_layer(r,s,t,l,o);this.#r.set(a,i),this.#a.addLayer(i)}else console.warn("[OlController] The map instance has already disposed.")}addPolygonLayer(a,r,s){if(this.#a)if(this.#r.has(a)&&console.warn(`[OlController] A layer named "${a}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`),"string"==typeof r){const t=e.create_polygon_layer__GeoJson(r,s);this.#r.set(a,t),this.#a.addLayer(t)}else{const t=e.create_polygon_layer__PathArray(r,s);this.#r.set(a,t),this.#a.addLayer(t)}else console.warn("[OlController] The map instance has already disposed.")}addPolylineLayer(a,r,s){if(this.#a){this.#r.has(a)&&console.warn(`[OlController] A layer named "${a}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const t=e.create_polyline_layer(r,s);this.#r.set(a,t),this.#a.addLayer(t)}else console.warn("[OlController] The map instance has already disposed.")}removeLayer(e){void 0===e?(this.#r.forEach((e=>{e.dispose()})),this.#r.clear()):(this.#r.get(e)?.dispose(),this.#r.delete(e))}#s=new Map;get animationLayers(){return[...this.#s.keys()]}addAnimation(e,r,s,t=1e5,l,o){if(this.#a){this.#s.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const i=new a.AnimationController(this.#a,r,s,t,l,o);this.#s.set(e,i)}else console.warn("[OlController] The map instance has already disposed.")}getAnimation(e){return this.#s.get(e)??null}removeAnimation(e){void 0===e?(this.#s.forEach((e=>{e.dispose()})),this.#s.clear()):(this.#s.get(e)?.dispose(),this.#s.delete(e))}#t=new Map;get popupOverlays(){return[...this.#t.keys()]}addPopup(e,a,s,t){if(this.#a){this.#t.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const l=new r.PopupController(a,this.#a,s,t);this.#t.set(e,l)}else console.warn("[OlController] The map instance has already disposed.")}getPopup(e){return this.#t.get(e)??null}removePopup(e){void 0===e?(this.#t.forEach((e=>{e.dispose()})),this.#t.clear()):(this.#t.get(e)?.dispose(),this.#t.delete(e))}animateTo(e,a=1500){this.#a?.getView().animate({center:e,duration:a})}cleanUp(){this.removeLayer(),this.removeAnimation()}dispose(){this.cleanUp(),this.#a?.dispose(),this.#a=null,this.#e=null}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJuYW1lcyI6WyJkb20iLCJ0aGlzIiwibWFwIiwiaW5zdGFudGlhdGVkIiwiY29uc3RydWN0b3IiLCJlbCIsInNyYyIsImluaXRPcHRpb25zIiwiY3JlYXRlX3RpbGVfbWFwX194eXoiLCJyZW5kZXIiLCJjb25zb2xlIiwid2FybiIsImRpc3Bvc2UiLCJsYXllcnMiLCJNYXAiLCJrZXlzIiwiYWRkUG9pbnRMYXllciIsImxheWVyTmFtZSIsInBvaW50cyIsImljb24iLCJoYXMiLCJsYXllcl9wb2ludCIsImNyZWF0ZV9wb2ludF9sYXllciIsInNldCIsImFkZExheWVyIiwiYWRkUG9pbnRDbHVzdGVyTGF5ZXIiLCJkaXN0YW5jZSIsIm1pbkRpc3RhbmNlIiwiY2x1c3RlclN0eWxlIiwibGF5ZXJfcG9pbnRfY2x1c3RlciIsImNyZWF0ZV9wb2ludF9jbHVzdGVyX2xheWVyIiwiYWRkUG9seWdvbkxheWVyIiwicG9seWdvbnMiLCJzdHlsZSIsImxheWVyX2pzb24iLCJjcmVhdGVfcG9seWdvbl9sYXllcl9fR2VvSnNvbiIsImxheWVyX3BhdGgiLCJjcmVhdGVfcG9seWdvbl9sYXllcl9fUGF0aEFycmF5IiwiYWRkUG9seWxpbmVMYXllciIsInBvbHlsaW5lcyIsImxheWVyX3BvbHlsaW5lIiwiY3JlYXRlX3BvbHlsaW5lX2xheWVyIiwicmVtb3ZlTGF5ZXIiLCJ1bmRlZmluZWQiLCJmb3JFYWNoIiwidmVjTGF5ZXIiLCJjbGVhciIsImdldCIsImRlbGV0ZSIsImFuaW1hdGlvbkxheWVycyIsImFkZEFuaW1hdGlvbiIsInBhdGgiLCJpY29ucyIsImR1cmF0aW9uIiwicGVyY2VudFVwZGF0ZUNCIiwiYW5pbWF0aW9uX2NvbnRyb2xsZXIiLCJBbmltYXRpb25Db250cm9sbGVyIiwiZ2V0QW5pbWF0aW9uIiwicmVtb3ZlQW5pbWF0aW9uIiwiY29udHJvbGxlciIsInBvcHVwT3ZlcmxheXMiLCJhZGRQb3B1cCIsImFuY2hvciIsIm9mZnNldCIsInBvcHVwX2NvbnRyb2xsZXIiLCJQb3B1cENvbnRyb2xsZXIiLCJnZXRQb3B1cCIsInJlbW92ZVBvcHVwIiwiYW5pbWF0ZVRvIiwiY2VudGVyIiwiZ2V0VmlldyIsImFuaW1hdGUiLCJjbGVhblVwIl0sIm1hcHBpbmdzIjoiK2FBb0JBLE1BS0lBLEdBSUlBLFVBQ0EsT0FBT0MsTUFBS0QsRUFNaEJFLEdBQXFCLEtBS2pCQyxtQkFDQSxPQUFxQixPQUFkRixNQUFLQyxFQVNoQkUsWUFDSUMsRUFDQUMsRUFDQUMsR0FDQU4sTUFBS0QsRUFBT0ssRUFDWkosTUFBS0MsRUFBT00sRUFBb0JBLHFCQUFDSCxFQUFJQyxFQUFLQyxHQVM5Q0UsT0FDSUosRUFDQUMsRUFDQUMsR0FDaUIsT0FBZE4sTUFBS0MsSUFDSlEsUUFBUUMsS0FBSyxnTEFDYlYsS0FBS1csV0FFVFgsTUFBS0QsRUFBT0ssRUFDWkosTUFBS0MsRUFBT00sRUFBb0JBLHFCQUFDSCxFQUFJQyxFQUFLQyxHQVM5Q00sR0FBVSxJQUFJQyxJQUlWRCxhQUNBLE1BQU8sSUFBS1osTUFBS1ksRUFBUUUsUUFTdEJDLGNBQ0hDLEVBQ0FDLEVBQ0FDLEdBQ0EsR0FBSWxCLE1BQUtDLEVBR0osQ0FDRUQsTUFBS1ksRUFBUU8sSUFBSUgsSUFDaEJQLFFBQVFDLEtBQUssaUNBQWtDTSx5SEFHbkQsTUFBTUksRUFBY0MsRUFBQUEsbUJBQW1CSixFQUFRQyxHQUMvQ2xCLE1BQUtZLEVBQVFVLElBQUlOLEVBQVdJLEdBQzVCcEIsTUFBS0MsRUFBS3NCLFNBQVNILFFBVG5CWCxRQUFRQyxLQUFLLHlEQXNCZGMscUJBQ0hSLEVBQ0FDLEVBQ0FDLEVBQ0FPLEVBQ0FDLEVBQ0FDLEdBQ0EsR0FBSTNCLE1BQUtDLEVBR0osQ0FDRUQsTUFBS1ksRUFBUU8sSUFBSUgsSUFDaEJQLFFBQVFDLEtBQUssaUNBQWtDTSx5SEFHbkQsTUFBTVksRUFBc0JDLEVBQUFBLDJCQUEyQlos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
