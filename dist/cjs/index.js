"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("./core.js"),a=require("./animation.js"),r=require("./popup.js");require("ol/ol.css"),require("ol"),require("ol/layer/Tile"),require("ol/source"),require("ol/layer/Vector"),require("ol/source/Vector"),require("ol/format"),require("ol/style"),require("ol/geom"),require("ol/proj"),require("ol/style/Circle"),require("ol/layer/Image"),require("ol/render");exports.OlController=class{#e;get dom(){return this.#e}#a=null;get instantiated(){return null!==this.#a}constructor(a,r){this.#e=a,this.#a=e.create_tile_map__xyz(a,r)}render(a,r){null!==this.#a&&(console.warn('[OlController] There is a map instance on the target dom, calling the method "render" will overwrite the old map instance. If that`s what you`re doing, ignore this warning.'),this.dispose()),this.#e=a,this.#a=e.create_tile_map__xyz(a,r)}#r=new Map;get layers(){return[...this.#r.keys()]}addPointLayer(a,r,s){if(this.#a){this.#r.has(a)&&console.warn(`[OlController] A layer named "${a}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const t=e.create_point_layer(r,s);this.#r.set(a,t),this.#a.addLayer(t)}else console.warn("[OlController] The map instance has already disposed.")}addPointClusterLayer(a,r,s,t,l,i){if(this.#a){this.#r.has(a)&&console.warn(`[OlController] A layer named "${a}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const o=e.create_point_cluster_layer(r,s,t,l,i);this.#r.set(a,o),this.#a.addLayer(o)}else console.warn("[OlController] The map instance has already disposed.")}addPolygonLayer(a,r,s){if(this.#a)if(this.#r.has(a)&&console.warn(`[OlController] A layer named "${a}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`),"string"==typeof r){const t=e.create_polygon_layer__GeoJson(r,s);this.#r.set(a,t),this.#a.addLayer(t)}else{const t=e.create_polygon_layer__PathArray(r,s);this.#r.set(a,t),this.#a.addLayer(t)}else console.warn("[OlController] The map instance has already disposed.")}addPolylineLayer(a,r,s){if(this.#a){this.#r.has(a)&&console.warn(`[OlController] A layer named "${a}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const t=e.create_polyline_layer(r,s);this.#r.set(a,t),this.#a.addLayer(t)}else console.warn("[OlController] The map instance has already disposed.")}toggle_visible(e,a){const r=this.#r.get(e);r&&r.setVisible(a??!r.getVisible())}removeLayer(e){void 0===e?(this.#r.forEach((e=>{e.dispose()})),this.#r.clear()):(this.#r.get(e)?.dispose(),this.#r.delete(e))}#s=new Map;get animationLayers(){return[...this.#s.keys()]}addAnimation(e,r,s,t=1e5,l,i){if(this.#a){this.#s.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const o=new a.AnimationController(this.#a,r,s,t,l,i);this.#s.set(e,o)}else console.warn("[OlController] The map instance has already disposed.")}getAnimation(e){return this.#s.get(e)??null}removeAnimation(e){void 0===e?(this.#s.forEach((e=>{e.dispose()})),this.#s.clear()):(this.#s.get(e)?.dispose(),this.#s.delete(e))}#t=new Map;get popupOverlays(){return[...this.#t.keys()]}addPopup(e,a,s,t){if(this.#a){this.#t.has(e)&&console.warn(`[OlController] A layer named "${e}" already exists, the old layer will be replaced by the new layer. If that's what you're doing, ignore this warning.`);const l=new r.PopupController(a,this.#a,s,t);this.#t.set(e,l)}else console.warn("[OlController] The map instance has already disposed.")}getPopup(e){return this.#t.get(e)??null}removePopup(e){void 0===e?(this.#t.forEach((e=>{e.dispose()})),this.#t.clear()):(this.#t.get(e)?.dispose(),this.#t.delete(e))}animateTo(e,a=1500){this.#a?.getView().animate({center:e,duration:a})}cleanUp(){this.removeLayer(),this.removeAnimation()}dispose(){this.cleanUp(),this.#a?.dispose(),this.#a=null,this.#e=null}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJuYW1lcyI6WyJkb20iLCJ0aGlzIiwibWFwIiwiaW5zdGFudGlhdGVkIiwiY29uc3RydWN0b3IiLCJlbCIsImluaXRPcHRpb25zIiwiY3JlYXRlX3RpbGVfbWFwX194eXoiLCJyZW5kZXIiLCJjb25zb2xlIiwid2FybiIsImRpc3Bvc2UiLCJsYXllcnMiLCJNYXAiLCJrZXlzIiwiYWRkUG9pbnRMYXllciIsImxheWVyTmFtZSIsInBvaW50cyIsImljb24iLCJoYXMiLCJsYXllcl9wb2ludCIsImNyZWF0ZV9wb2ludF9sYXllciIsInNldCIsImFkZExheWVyIiwiYWRkUG9pbnRDbHVzdGVyTGF5ZXIiLCJkaXN0YW5jZSIsIm1pbkRpc3RhbmNlIiwiY2x1c3RlclN0eWxlIiwibGF5ZXJfcG9pbnRfY2x1c3RlciIsImNyZWF0ZV9wb2ludF9jbHVzdGVyX2xheWVyIiwiYWRkUG9seWdvbkxheWVyIiwicG9seWdvbnMiLCJzdHlsZSIsImxheWVyX2pzb24iLCJjcmVhdGVfcG9seWdvbl9sYXllcl9fR2VvSnNvbiIsImxheWVyX3BhdGgiLCJjcmVhdGVfcG9seWdvbl9sYXllcl9fUGF0aEFycmF5IiwiYWRkUG9seWxpbmVMYXllciIsInBvbHlsaW5lcyIsImxheWVyX3BvbHlsaW5lIiwiY3JlYXRlX3BvbHlsaW5lX2xheWVyIiwidG9nZ2xlX3Zpc2libGUiLCJ0byIsInRhcmdldF9sYXllciIsImdldCIsInNldFZpc2libGUiLCJnZXRWaXNpYmxlIiwicmVtb3ZlTGF5ZXIiLCJ1bmRlZmluZWQiLCJmb3JFYWNoIiwidmVjTGF5ZXIiLCJjbGVhciIsImRlbGV0ZSIsImFuaW1hdGlvbkxheWVycyIsImFkZEFuaW1hdGlvbiIsInBhdGgiLCJpY29ucyIsImR1cmF0aW9uIiwicGVyY2VudFVwZGF0ZUNCIiwiYW5pbWF0aW9uX2NvbnRyb2xsZXIiLCJBbmltYXRpb25Db250cm9sbGVyIiwiZ2V0QW5pbWF0aW9uIiwicmVtb3ZlQW5pbWF0aW9uIiwiY29udHJvbGxlciIsInBvcHVwT3ZlcmxheXMiLCJhZGRQb3B1cCIsImFuY2hvciIsIm9mZnNldCIsInBvcHVwX2NvbnRyb2xsZXIiLCJQb3B1cENvbnRyb2xsZXIiLCJnZXRQb3B1cCIsInJlbW92ZVBvcHVwIiwiYW5pbWF0ZVRvIiwiY2VudGVyIiwiZ2V0VmlldyIsImFuaW1hdGUiLCJjbGVhblVwIl0sIm1hcHBpbmdzIjoieWNBb0JBLE1BS0lBLEdBSUlBLFVBQ0EsT0FBT0MsTUFBS0QsRUFNaEJFLEdBQXFCLEtBS2pCQyxtQkFDQSxPQUFxQixPQUFkRixNQUFLQyxFQVFoQkUsWUFDSUMsRUFDQUMsR0FDQUwsTUFBS0QsRUFBT0ssRUFDWkosTUFBS0MsRUFBT0ssRUFBQUEscUJBQXFCRixFQUFJQyxHQVF6Q0UsT0FDSUgsRUFDQUMsR0FDaUIsT0FBZEwsTUFBS0MsSUFDSk8sUUFBUUMsS0FBSyxnTEFDYlQsS0FBS1UsV0FFVFYsTUFBS0QsRUFBT0ssRUFDWkosTUFBS0MsRUFBT0ssRUFBQUEscUJBQXFCRixFQUFJQyxHQVN6Q00sR0FBVSxJQUFJQyxJQUlWRCxhQUNBLE1BQU8sSUFBS1gsTUFBS1csRUFBUUUsUUFTdEJDLGNBQ0hDLEVBQ0FDLEVBQ0FDLEdBQ0EsR0FBSWpCLE1BQUtDLEVBR0osQ0FDRUQsTUFBS1csRUFBUU8sSUFBSUgsSUFDaEJQLFFBQVFDLEtBQUssaUNBQWtDTSx5SEFHbkQsTUFBTUksRUFBY0MsRUFBQUEsbUJBQW1CSixFQUFRQyxHQUMvQ2pCLE1BQUtXLEVBQVFVLElBQUlOLEVBQVdJLEdBQzVCbkIsTUFBS0MsRUFBS3FCLFNBQVNILFFBVG5CWCxRQUFRQyxLQUFLLHlEQXNCZGMscUJBQ0hSLEVBQ0FDLEVBQ0FDLEVBQ0FPLEVBQ0FDLEVBQ0FDLEdBQ0EsR0FBSTFCLE1BQUtDLEVBR0osQ0FDRUQsTUFBS1csRUFBUU8sSUFBSUgsSUFDaEJQLFFBQVFDLEtBQUssaUNBQWtDTSx5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
