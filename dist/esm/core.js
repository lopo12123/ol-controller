import"ol/ol.css";import{View as e,Map as r,Feature as t}from"ol";import o from"ol/layer/Tile";import{OSM as n,XYZ as s,Cluster as a}from"ol/source";import l from"ol/layer/Vector";import i from"ol/source/Vector";import{GeoJSON as c}from"ol/format";import{Style as y,Icon as d,Stroke as h,Fill as w,Text as f}from"ol/style";import{Point as m,Polygon as k,LineString as p}from"ol/geom";import{useGeographic as u}from"ol/proj";import T from"ol/style/Circle";var g;!function(e){e.stroke="#39c",e[e.strokeWidth=2]="strokeWidth",e.fill="transparent",e.IconFill="#39c",e.IconStroke="#fff",e.IconTextColor="#fff"}(g||(g={})),u();const A=(t,a,l)=>{const i={target:t,layers:[new o({source:a?new s({url:a}):new n})],view:new e({center:l?.center??[0,0],projection:l?.projection??"EPSG:4326",zoom:l?.zoom??7,minZoom:Math.max(2,l?.minZoom??0),maxZoom:Math.min(20,l?.maxZoom??20)}),controls:[]};return new r(i)},x=(e,r)=>{const o=new i,n=new l({source:o});return e.forEach((e=>{const n=new t({type:"point",geometry:new m(e.anchor),self:e});n.setStyle(new y({image:new d({anchor:[.5,.5],scale:1,anchorXUnits:"fraction",anchorYUnits:"fraction",src:e.icon??r})})),o.addFeature(n)})),n},S=(e,r,o,n,s)=>{const c=e.map((e=>new t({type:"point_cluster",geometry:new m(e.anchor),self:e}))),k=new i({features:c}),p=new a({distance:o,minDistance:n,source:k}),u={};return new l({source:p,style:e=>{const t=e.get("features").length;let o=u[t];return o||(o=((e,r,t)=>{const o="function"==typeof t?.text?t.text(e):t?.text??e.toString();return new y({image:!1===t?.hideIcon?r:new T({radius:t?.radius??10,stroke:new h({color:t?.borderColor??g.IconStroke}),fill:new w({color:t?.backgroundColor??g.IconFill})}),text:new f({text:o,fill:new w({color:t?.textColor??g.IconTextColor})})})})(t,new d({anchor:[.5,.5],scale:1,anchorXUnits:"fraction",anchorYUnits:"fraction",src:r}),s),u[t]=o),o}})},W=(e,r)=>("dashed"!==r?.strokeType||r?.dashArray||console.warn('[OlController] The "style.StrokeType" will not function as "style.dashArray" is in invalid format.'),new l({source:new i({url:e,format:new c}),style:new y({stroke:new h({color:r?.stroke??g.stroke,width:r?.strokeWidth??g.strokeWidth,lineDash:"dashed"===r?.strokeType?r?.dashArray??[0,0]:[0,0]}),fill:new w({color:r?.fill??g.fill})})})),C=(e,r)=>{"dashed"!==r?.strokeType||r?.dashArray||console.warn('[OlController] The "style.StrokeType" will not function as "style.dashArray" is in invalid format.');const o=new i,n=new l({source:o});return e.forEach((e=>{const n=new t({type:"polygon",geometry:new k([e.path]),self:e});let s=[0,0];"dashed"===e.style?.strokeType&&e.style.dashArray?s=e.style.dashArray:!e.style?.strokeType&&"dashed"===r?.strokeType&&r.dashArray&&(s=r.dashArray),n.setStyle(new y({stroke:new h({color:e.style?.stroke??r?.stroke??g.stroke,width:e.style?.strokeWidth??r?.strokeWidth??g.strokeWidth,lineDash:s}),fill:new w({color:e.style?.fill??r?.fill??g.fill})})),o.addFeature(n)})),n},F=(e,r)=>{"dashed"!==r?.strokeType||r?.dashArray||console.warn('[OlController] The "style.StrokeType" will not function as "style.dashArray" is in invalid format.');const o=new i,n=new l({source:o});return e.forEach((e=>{const n=new t({type:"polyline",geometry:new p(e.path),self:e});let s=[0,0];if("dashed"===e.style?.strokeType&&e.style.dashArray?s=e.style.dashArray:!e.style?.strokeType&&"dashed"===r?.strokeType&&r.dashArray&&(s=r.dashArray),n.setStyle(new y({stroke:new h({color:e.style?.stroke??r?.stroke??g.stroke,width:e.style?.strokeWidth??r?.strokeWidth??g.strokeWidth,lineDash:s})})),r?.startMarker){const n=new t({type:"start-marker",geometry:new m(e.path[0])});n.setStyle(new y({image:new d({anchor:[.5,.5],src:r.startMarker})})),o.addFeature(n)}if(r?.endMarker){const n=new t({type:"end-marker",geometry:new m(e.path[0])});n.setStyle(new y({image:new d({anchor:[.5,.5],scale:1,anchorXUnits:"fraction",anchorYUnits:"fraction",src:r.endMarker})})),o.addFeature(n)}o.addFeature(n)})),n};export{S as create_point_cluster_layer,x as create_point_layer,W as create_polygon_layer__GeoJson,C as create_polygon_layer__PathArray,F as create_polyline_layer,A as create_tile_map__xyz};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibmFtZXMiOlsiVXNlRGVmYXVsdCIsInVzZUdlb2dyYXBoaWMiLCJjcmVhdGVfdGlsZV9tYXBfX3h5eiIsImVsIiwic3JjIiwib3B0aW9ucyIsIm1hcF9vcHRpb24iLCJ0YXJnZXQiLCJsYXllcnMiLCJUaWxlTGF5ZXIiLCJzb3VyY2UiLCJYWVoiLCJ1cmwiLCJPU00iLCJ2aWV3IiwiVmlldyIsImNlbnRlciIsInByb2plY3Rpb24iLCJ6b29tIiwibWluWm9vbSIsIk1hdGgiLCJtYXgiLCJtYXhab29tIiwibWluIiwiY29udHJvbHMiLCJPbE1hcCIsImNyZWF0ZV9wb2ludF9sYXllciIsInBvaW50cyIsImljb24iLCJWZWN0b3JTb3VyY2UiLCJsYXllciIsIlZlY3RvckxheWVyIiwiZm9yRWFjaCIsInBvaW50IiwicG9pbnRfZmVhdHVyZSIsIkZlYXR1cmUiLCJ0eXBlIiwiZ2VvbWV0cnkiLCJQb2ludCIsImFuY2hvciIsInNlbGYiLCJzZXRTdHlsZSIsIlN0eWxlIiwiaW1hZ2UiLCJJY29uIiwic2NhbGUiLCJhbmNob3JYVW5pdHMiLCJhbmNob3JZVW5pdHMiLCJhZGRGZWF0dXJlIiwiY3JlYXRlX3BvaW50X2NsdXN0ZXJfbGF5ZXIiLCJkaXN0YW5jZSIsIm1pbkRpc3RhbmNlIiwiY2x1c3RlclN0eWxlIiwiZmVhdHVyZXMiLCJtYXAiLCJjbHVzdGVyX3NvdXJjZSIsIkNsdXN0ZXIiLCJzdHlsZUNhY2hlIiwic3R5bGUiLCJmZWF0dXJlX2dyb3VwIiwic2l6ZSIsImdldCIsImxlbmd0aCIsIm51bSIsIm9yaWdpbkljb24iLCJ0ZXh0VG9TaG93IiwidGV4dCIsInRvU3RyaW5nIiwiaGlkZUljb24iLCJDaXJjbGVTdHlsZSIsInJhZGl1cyIsInN0cm9rZSIsIlN0cm9rZSIsImNvbG9yIiwiYm9yZGVyQ29sb3IiLCJJY29uU3Ryb2tlIiwiZmlsbCIsIkZpbGwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJJY29uRmlsbCIsIlRleHQiLCJ0ZXh0Q29sb3IiLCJJY29uVGV4dENvbG9yIiwiY2x1c3RlclN0eWxlR2VuZXJhdG9yIiwiY3JlYXRlX3BvbHlnb25fbGF5ZXJfX0dlb0pzb24iLCJnZW9qc29uIiwic3Ryb2tlVHlwZSIsImRhc2hBcnJheSIsImNvbnNvbGUiLCJ3YXJuIiwiZm9ybWF0IiwiR2VvSlNPTiIsIndpZHRoIiwic3Ryb2tlV2lkdGgiLCJsaW5lRGFzaCIsImNyZWF0ZV9wb2x5Z29uX2xheWVyX19QYXRoQXJyYXkiLCJwb2x5Z29ucyIsInBvbHlnb24iLCJwb2x5Z29uX2ZlYXR1cmUiLCJQb2x5Z29uIiwicGF0aCIsImRhc2giLCJjcmVhdGVfcG9seWxpbmVfbGF5ZXIiLCJwb2x5bGluZXMiLCJwb2x5bGluZSIsInBvbHlsaW5lX2ZlYXR1cmUiLCJMaW5lU3RyaW5nIiwic3RhcnRNYXJrZXIiLCJzdGFydCIsImVuZE1hcmtlciIsImVuZCJdLCJtYXBwaW5ncyI6InVjQWdCQSxJQUFXQSxHQUFYLFNBQVdBLEdBQ1BBLEVBQUEsT0FBQSxPQUNBQSxFQUFBQSxFQUFBLFlBQUEsR0FBQSxjQUNBQSxFQUFBLEtBQUEsY0FDQUEsRUFBQSxTQUFBLE9BQ0FBLEVBQUEsV0FBQSxPQUNBQSxFQUFBLGNBQUEsT0FOSixDQUFXQSxJQUFBQSxFQU9WLEtBR0RDLElBa0NNLE1BQUFDLEVBQXVCLENBQ3pCQyxFQUNBQyxFQUNBQyxLQUNBLE1BQU1DLEVBQXlCLENBQzNCQyxPQUFRSixFQUNSSyxPQUFRLENBQ0osSUFBSUMsRUFBVSxDQUNWQyxPQUFTTixFQUVMLElBQUlPLEVBQUksQ0FFSkMsSUFBS1IsSUFIVCxJQUFJUyxLQU9oQkMsS0FBTSxJQUFJQyxFQUFLLENBQ1hDLE9BQVFYLEdBQVNXLFFBQVUsQ0FBRSxFQUFHLEdBQ2hDQyxXQUFZWixHQUFTWSxZQUFjLFlBQ25DQyxLQUFNYixHQUFTYSxNQUFRLEVBQ3ZCQyxRQUFTQyxLQUFLQyxJQUFJLEVBQUdo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
